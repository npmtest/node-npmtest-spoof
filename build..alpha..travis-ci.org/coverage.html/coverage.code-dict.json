{"/home/travis/build/npmtest/node-npmtest-spoof/test.js":"/* istanbul instrument in package npmtest_spoof */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-spoof/lib.npmtest_spoof.js":"/* istanbul instrument in package npmtest_spoof */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_spoof = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_spoof = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-spoof/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-spoof && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_spoof */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_spoof\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_spoof.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_spoof.rollup.js'] =\n            local.assetsDict['/assets.npmtest_spoof.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_spoof.__dirname +\n                    '/lib.npmtest_spoof.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-spoof/node_modules/spoof/index.js":"var cp = require('child_process')\nvar quote = require('shell-quote').quote\nvar zeroFill = require('zero-fill')\nvar Winreg = require('winreg')\n\nif (!cp.execSync) {\n  console.error('Error: Missing child_process.execSync. Please use node 0.12 or iojs.')\n  process.exit(1)\n}\n\n// Path to Airport binary on macOS 10.7+\nvar PATH_TO_AIRPORT = '/System/Library/PrivateFrameworks/Apple80211.framework/Resources/airport'\n\n// Windows registry key for interface MAC. Checked on Windows 7\nvar WIN_REGISTRY_PATH = '\\\\SYSTEM\\\\CurrentControlSet\\\\Control\\\\Class\\\\{4D36E972-E325-11CE-BFC1-08002BE10318}'\n\n// Regex to validate a MAC address\n// Example: 00-00-00-00-00-00 or 00:00:00:00:00:00 or 000000000000\nvar MAC_ADDRESS_RE = /([0-9A-F]{1,2})[:-]?([0-9A-F]{1,2})[:-]?([0-9A-F]{1,2})[:-]?([0-9A-F]{1,2})[:-]?([0-9A-F]{1,2})[:-]?([0-9A-F]{1,2})/i\n\n// Regex to validate a MAC address in cisco-style\n// Example: 0123.4567.89ab\nvar CISCO_MAC_ADDRESS_RE = /([0-9A-F]{0,4})\\.([0-9A-F]{0,4})\\.([0-9A-F]{0,4})/i\n\n// The possible port names for wireless devices as returned by networksetup.\nvar WIRELESS_PORT_NAMES = ['wi-fi', 'airport']\nexports.WIRELESS_PORT_NAMES = WIRELESS_PORT_NAMES\n\n/**\n * Returns the list of interfaces found on this machine as reported by the\n * `networksetup` command.\n * @param {Array.<string>|null} targets\n * @return {Array.<Object>)}\n */\nexports.findInterfaces = function (targets) {\n  targets = targets || []\n\n  targets = targets.map(function (target) {\n    return target.toLowerCase()\n  })\n\n  var output, interfaces, details, result, i, port, device, address, it, j, target, lines\n\n  if (process.platform === 'darwin') {\n    // Parse the output of `networksetup -listallhardwareports` which gives\n    // us 3 fields per port:\n    // - the port name,\n    // - the device associated with this port, if any,\n    // - the MAC address, if any, otherwise 'N/A'\n\n    try {\n      output = cp.execSync('networksetup -listallhardwareports').toString()\n    } catch (err) {\n      throw err\n    }\n    details = []\n    while (true) {\n      result = /(?:Hardware Port|Device|Ethernet Address): (.+)/.exec(output)\n      if (!result || !result[1]) {\n        break\n      }\n      details.push(result[1])\n      output = output.slice(result.index + result[1].length)\n    }\n\n    interfaces = [] // to return\n\n    // Split the results into chunks of 3 (for our three fields) and yield\n    // those that match `targets`.\n    for (i = 0; i < details.length; i += 3) {\n      port = details[i]\n      device = details[i + 1]\n      address = details[i + 2]\n\n      address = MAC_ADDRESS_RE.exec(address.toUpperCase())\n      if (address) {\n        address = exports.normalize(address[0])\n      }\n\n      it = {\n        address: address,\n        currentAddress: exports.getInterfaceMAC(device),\n        device: device,\n        port: port\n      }\n\n      if (targets.length === 0) {\n        // Not trying to match anything in particular, return everything.\n        interfaces.push(it)\n        continue\n      }\n\n      for (j = 0; j < targets.length; j++) {\n        target = targets[j]\n        if (target === port.toLowerCase() || target === device.toLowerCase()) {\n          interfaces.push(it)\n          break\n        }\n      }\n    }\n  } else if (process.platform === 'linux') {\n    // Parse the output of `ifconfig` which gives us:\n    // - the adapter description\n    // - the adapter name/device associated with this, if any,\n    // - the MAC address, if any\n    try {\n      output = cp.execSync('ifconfig', { stdio: 'pipe' }).toString()\n    } catch (err) {\n      throw err\n    }\n\n    details = []\n    while (true) {\n      result = /(.*?)HWaddr(.*)/mi.exec(output)\n      if (!result || !result[1] || !result[2]) {\n        break\n      }\n      details.push(result[1], result[2])\n      output = output.slice(result.index + result[0].length)\n    }\n\n    interfaces = []\n\n    for (i = 0; i < details.length; i += 2) {\n      var s = details[i].split(':')\n      if (s.length >= 2) {\n        device = s[0].split(' ')[0]\n        port = s[1].trim()\n      }\n\n      address = details[i + 1].trim()\n      if (address) {\n        address = exports.normalize(address)\n      }\n\n      it = {\n        address: address,\n        currentAddress: exports.getInterfaceMAC(device),\n        device: device,\n        port: port\n      }\n\n      if (targets.length === 0) {\n        // Not trying to match anything in particular, return everything.\n        interfaces.push(it)\n        continue\n      }\n\n      for (j = 0; j < targets.length; j++) {\n        target = targets[j]\n        if (target === port.toLowerCase() || target === device.toLowerCase()) {\n          interfaces.push(it)\n          break\n        }\n      }\n    }\n  } else if (process.platform === 'win32') {\n    try {\n      output = cp.execSync('ipconfig /all', { stdio: 'pipe' }).toString()\n    } catch (err) {\n      throw err\n    }\n\n    details = []\n    interfaces = []\n    lines = output.split('\\n')\n    it = false\n    for (i = 0; i < lines.length; i++) {\n      // Check if new device\n      if (lines[i].substr(0, 1).match(/[A-Z]/)) {\n        if (it) {\n          if (targets.length === 0) {\n            // Not trying to match anything in particular, return everything.\n            interfaces.push(it)\n          } else {\n            for (j = 0; j < targets.length; j++) {\n              target = targets[j]\n              if (target === it.port.toLowerCase() || target === it.device.toLowerCase()) {\n                interfaces.push(it)\n                break\n              }\n            }\n          }\n        }\n\n        it = {\n          port: '',\n          device: ''\n        }\n\n        result = /adapter (.+?):/.exec(lines[ i ])\n        if (!result) {\n          continue\n        }\n\n        it.device = result[1]\n      }\n\n      if (!it) {\n        continue\n      }\n\n      // Try to find address\n      result = /Physical Address.+?:(.*)/mi.exec(lines[i])\n      if (result) {\n        it.address = exports.normalize(result[1].trim())\n        it.currentAddress = it.address\n        continue\n      }\n\n      // Try to find description\n      result = /description.+?:(.*)/mi.exec(lines[i])\n      if (result) {\n        it.description = result[1].trim()\n        continue\n      }\n    }\n  }\n\n  return interfaces\n}\n\n/**\n * Returns the first interface which matches `target`\n * @param  {string} target\n * @return {Object}\n */\nexports.findInterface = function (target) {\n  var interfaces = exports.findInterfaces([target])\n  return interfaces && interfaces[0]\n}\n\n/**\n * Returns currently-set MAC address of given interface. This is distinct from the\n * interface's hardware MAC address.\n * @return {string}\n */\nexports.getInterfaceMAC = function (device) {\n  var output, address\n\n  if (process.platform === 'darwin' || process.platform === 'linux') {\n    try {\n      output = cp.execSync(quote(['ifconfig', device]), { stdio: 'pipe' }).toString()\n    } catch (err) {\n      return null\n    }\n\n    address = MAC_ADDRESS_RE.exec(output)\n    return address && exports.normalize(address[0])\n  } else if (process.platform === 'win32') {\n    console.error('No windows support for this method yet - PR welcome!')\n  }\n}\n\n/**\n * Sets the mac address for given `device` to `mac`.\n *\n * Device varies by platform:\n *   OS X, Linux: this is the interface name in ifconfig\n *   Windows: this is the network adapter name in ipconfig\n *\n * @param {string} device\n * @param {string} mac\n * @param {string=} port\n */\nexports.setInterfaceMAC = function (device, mac, port) {\n  if (!MAC_ADDRESS_RE.exec(mac)) {\n    throw new Error(mac + ' is not a valid MAC address')\n  }\n\n  var isWirelessPort = port && WIRELESS_PORT_NAMES.indexOf(port.toLowerCase()) >= 0\n\n  if (process.platform === 'darwin') {\n    if (isWirelessPort) {\n      // Turn on the device, assuming it's an airport device.\n      try {\n        cp.execSync(quote(['networksetup', '-setairportpower', device, 'on']))\n      } catch (err) {\n        throw new Error('Unable to power on wifi device')\n      }\n    }\n\n    // For some reason this seems to be required even when changing a non-airport device.\n    try {\n      cp.execSync(quote([PATH_TO_AIRPORT, '-z']))\n    } catch (err) {\n      throw new Error('Unable to disassociate from wifi networks')\n    }\n\n    // Change the MAC.\n    try {\n      cp.execSync(quote(['ifconfig', device, 'ether', mac]))\n    } catch (err) {\n      throw new Error('Unable to change MAC address')\n    }\n\n    // Restart airport so it will associate with known networks (if any)\n    if (isWirelessPort) {\n      try {\n        cp.execSync(quote(['networksetup', '-setairportpower', device, 'off']))\n        cp.execSync(quote(['networksetup', '-setairportpower', device, 'on']))\n      } catch (err) {\n        throw new Error('Unable to set restart wifi device')\n      }\n    }\n  } else if (process.platform === 'linux') {\n    // Set the device's mac address.\n    // Handles shutting down and starting back up interface.\n    try {\n      cp.execSync(quote(['ifconfig', device, 'down', 'hw', 'ether', mac]))\n      cp.execSync(quote(['ifconfig', device, 'up']))\n    } catch (err) {\n      throw new Error('Unable to change MAC address')\n    }\n  } else if (process.platform === 'win32') {\n    // Locate adapter's registry and update network address (mac)\n    var regKey = new Winreg({\n      hive: Winreg.HKLM,\n      key: WIN_REGISTRY_PATH\n    })\n\n    regKey.keys(function (err, keys) {\n      if (err) {\n        console.log('ERROR: ' + err)\n      } else {\n        // Loop over all available keys and find the right adapter\n        for (var i = 0; i < keys.length; i++) {\n          exports.tryWindowsKey(keys[i].key, mac, device)\n        }\n      }\n    })\n  }\n}\n\n/**\n * Tries to set the \"NetworkAddress\" value on the specified registry key for given `device` to `mac`.\n *\n * @param {string} key\n * @param {string} device\n * @param {string} mac\n */\nexports.tryWindowsKey = function (key, mac, device) {\n  // Skip the Properties key to avoid problems with permissions\n  if (key.indexOf('Properties') > -1) {\n    return false\n  }\n\n  var networkAdapterKeyPath = new Winreg({\n    hive: Winreg.HKLM,\n    key: key\n  })\n\n  // we need to format the MAC a bit for Windows\n  mac = mac.replace(/:/g, '')\n\n  networkAdapterKeyPath.values(function (err, values) {\n    var gotAdapter = false\n    if (err) {\n      console.log('ERROR: ' + err)\n    } else {\n      for (var x = 0; x < values.length; x++) {\n        if (values[x].name === 'AdapterModel') {\n          gotAdapter = true\n          break\n        }\n      }\n\n      if (gotAdapter) {\n        networkAdapterKeyPath.set('NetworkAddress', 'REG_SZ', mac, function () {\n          try {\n            cp.execSync('netsh interface set interface \"' + device + '\" disable')\n            cp.execSync('netsh interface set interface \"' + device + '\" enable')\n          } catch (err) {\n            throw new Error('Unable to restart device, is the cmd running as admin?')\n          }\n        })\n      }\n    }\n  })\n}\n\n/**\n * Generates and returns a random MAC address.\n * @param  {boolean} localAdmin  locally administered address\n * @return {string}\n */\nexports.random = function (localAdmin) {\n  // Randomly assign a VM vendor's MAC address prefix, which should\n  // decrease chance of colliding with existing device's addresses.\n\n  var vendors = [\n    [ 0x00, 0x05, 0x69 ], // VMware\n    [ 0x00, 0x50, 0x56 ], // VMware\n    [ 0x00, 0x0C, 0x29 ], // VMware\n    [ 0x00, 0x16, 0x3E ], // Xen\n    [ 0x00, 0x03, 0xFF ], // Microsoft Hyper-V, Virtual Server, Virtual PC\n    [ 0x00, 0x1C, 0x42 ], // Parallels\n    [ 0x00, 0x0F, 0x4B ], // Virtual Iron 4\n    [ 0x08, 0x00, 0x27 ]  // Sun Virtual Box\n  ]\n\n  // Windows needs specific prefixes sometimes\n  // http://www.wikihow.com/Change-a-Computer's-Mac-Address-in-Windows\n  var windowsPrefixes = [\n    'D2',\n    'D6',\n    'DA',\n    'DE'\n  ]\n\n  var vendor = vendors[Math.floor(Math.random() * vendors.length)]\n\n  if (process.platform === 'win32') {\n    vendor[0] = windowsPrefixes[random(0, 3)]\n  }\n\n  var mac = [\n    vendor[0],\n    vendor[1],\n    vendor[2],\n    random(0x00, 0x7f),\n    random(0x00, 0xff),\n    random(0x00, 0xff)\n  ]\n\n  if (localAdmin) {\n    // Universally administered and locally administered addresses are\n    // distinguished by setting the second least significant bit of the\n    // most significant byte of the address. If the bit is 0, the address\n    // is universally administered. If it is 1, the address is locally\n    // administered. In the example address 02-00-00-00-00-01 the most\n    // significant byte is 02h. The binary is 00000010 and the second\n    // least significant bit is 1. Therefore, it is a locally administered\n    // address.[3] The bit is 0 in all OUIs.\n    mac[0] |= 2\n  }\n\n  return mac\n    .map(function (byte) {\n      return zeroFill(2, byte.toString(16))\n    })\n    .join(':').toUpperCase()\n}\n\n/**\n * Takes a MAC address in various formats:\n *\n *      - 00:00:00:00:00:00,\n *      - 00-00-00-00-00-00,\n *      - 0000.0000.0000\n *\n *  ... and returns it in the format 00:00:00:00:00:00.\n *\n * @param  {string} mac\n * @return {string}\n */\nexports.normalize = function (mac) {\n  var m = CISCO_MAC_ADDRESS_RE.exec(mac)\n  if (m) {\n    var halfwords = m.slice(1)\n    mac = halfwords.map(function (halfword) {\n      return zeroFill(4, halfword)\n    }).join('')\n    return chunk(mac, 2).join(':').toUpperCase()\n  }\n\n  m = MAC_ADDRESS_RE.exec(mac)\n  if (m) {\n    var bytes = m.slice(1)\n    return bytes\n      .map(function (byte) {\n        return zeroFill(2, byte)\n      })\n      .join(':')\n      .toUpperCase()\n  }\n\n  // return None\n}\n\nfunction chunk (str, n) {\n  var arr = []\n  for (var i = 0; i < str.length; i += n) {\n    arr.push(str.slice(i, i + n))\n  }\n  return arr\n}\n\n/**\n * Return a random integer between min and max (inclusive).\n * @param  {number} min\n * @param  {number=} max\n * @return {number}\n */\nfunction random (min, max) {\n  if (max == null) {\n    max = min\n    min = 0\n  }\n  return min + Math.floor(Math.random() * (max - min + 1))\n}\n"}